openapi: 3.0.0
info:
  title: Beverage Store API
  version: 1.0.0
  description: REST API for managing beverages and orders
servers:
  - url: http://localhost:8080/api
paths:
  /beverages:
    get:
      summary: Get list of all beverages
      parameters:
        - name: minPrice
          in: query
          required: false
          schema:
            type: number
        - name: maxPrice
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: List of beverages
          content:
            application/json:
              schema:
                type: array
                items: &id001
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    type:
                      type: string
                    price:
                      type: number
                    quantity:
                      type: integer
      tags:
        - beverages
    post:
      summary: Add new beverage(employee)
      requestBody:
        required: true
        content:
          application/json:
            schema: *id001
      responses:
        '201':
          description: Beverage created
          content:
            application/json:
              schema: *id001
        '400':
          description: Invalid beverage data
      tags:
        - beverages
  /beverages/{id}:
    put:
      summary: Update beverage by ID (employee)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema: *id001
      responses:
        '200':
          description: Beverage updated
          content:
            application/json:
              schema: *id001
        '404':
          description: Beverage not found
      tags:
        - beverages
  /orders:
    get:
      summary: Get all orders
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items: &id002
                  type: object
                  properties:
                    id:
                      type: string
                    status:
                      type: string
                    items:
                      type: array
                      items:
                        $ref: '#/components/schemas/OrderItemDTO'
      tags:
        - orders
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema: *id002
      responses:
        '201':
          description: Order created
        '400':
          description: Invalid order
      tags:
        - orders
  /orders/{id}:
    put:
      summary: Update an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: *id002
      responses:
        '200':
          description: Order updated
        '404':
          description: Order not found
      tags:
        - orders
    delete:
      summary: Cancel an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order deleted
      tags:
        - orders
  /orders/{id}/process:
    put:
      summary: Mark an order as processed
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order processed
        '404':
          description: Order not found
      tags:
        - orders
